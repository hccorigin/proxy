upstream gitlab-app {
    keepalive 32;
    server gitlab:80;
}

# "{__schema{types{name\n  fields{name\n args{name}}}}}"
#map $request_body $security_keywords {
#    '~.*(?<GQL_KEY>__schema).*' $GQL_KEY;
#    default "-";
#} 

map $request_body $prohibit_keyword {
    '~.*(?<GQL_KEY>__schema).*' $GQL_KEY;
    default "-";
}


# new gitlab security log format
log_format security_log escape=json '{event:{event_time: $time_local, prohibit_keyword: $prohibit_keyword,uri: $uri, request_uri: $request_uri, debug: $debug}}';


# set search paths for Lua external scripts
lua_package_path '/usr/local/lib/lua/?.lua;/blah/?.lua;;';

# set search paths for Lua external libraries written in C (can also use ';;'):
lua_package_cpath '/usr/local/lib/lua/?.so;/blah/blah/?.so;;';


server {
    listen  9080;
    server_name     gitlab.example.com;

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 =200 /intro-gitlab.html;

    location /intro-gitlab.html {
        root /usr/share/nginx/html;
        internal;
    }
    # 9080 포트 요청은 gitlab-app 으로 분기한다.
    location / {
        set $debug "0";

        if ($request_method = "POST") {

            rewrite_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                local match = ngx.re.match(ngx.var.request_body, "__schema")
                local urimatch = ngx.re.match(ngx.var.request_uri, "/api/graphql")
                ngx.var.debug = "1"
                if (urimatch and match) then
                    ngx.var.debug = "2"
                    -- res = ngx.location.capture("/")
                    return ngx.redirect("/")
                end
            }
            #content_by_lua_block {
            #    ngx.req.read_body()
            #    local data = ngx.req.get_body_data()
            #    local match = ngx.re.match(ngx.var.request_body, "__schema")
            #    local urimatch = ngx.re.match(ngx.var.request_uri, "/api/graphql")
            #    ngx.var.debug = "1"
            #    if (urimatch and match) then
            #            -- ngx.var.args = "prohibit_security&true"
            #            ngx.var.debug = "2"
            #            -- return ngx.redirect(string.format("%s://%s:%d", ngx.var.scheme, ngx.var.host, ngx.var.server_port), ngx.HTTP_MOVED_PERMANENTLY)
            #            return ngx.redirect(string.format("%s://%s:%d", ngx.var.scheme, ngx.var.host, ngx.var.server_port), ngx.HTTP_MOVED_PERMANENTLY)
            #    end
            #}
        }

        # if 절이 true 이면 log_security_format 으로 출력
        access_log  /var/log/nginx/security.log security_log;
            
        #rewrite 'prohibit_security' $scheme://$host:$server_port break;

        proxy_pass      http://gitlab-app;
        proxy_redirect  off;
        proxy_http_version  1.1;


        proxy_set_header    Host    $http_host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_max_temp_file_size    0;

        proxy_connect_timeout   120;
        proxy_send_timeout      120;
        proxy_read_timeout      120;
        proxy_buffering     off;
        proxy_request_buffering  off; # Required for HTTP Cli commands
        proxy_intercept_errors  on;
        sendfile    off;
    }


}
